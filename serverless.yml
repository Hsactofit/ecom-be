service: ecom-be
frameworkVersion: '3.38.0'

provider:
  name: aws
  runtime: nodejs18.x
  region: ${env:AWS_REGION}
  environment:
    MONGODB_URI: ${env:MONGODB_URI}
    NODE_ENV: production
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:DeleteItem
            - dynamodb:Scan
            - execute-api:ManageConnections
            - cloudformation:*
            - s3:*
            - events:*
            - lambda:*
            - logs:*
            - apigateway:*
          Resource: "*"

package:
  patterns:
    - '!node_modules/.prisma/**'
    - '!node_modules/@prisma/**'
    - '!tests/**'
    - '!coverage/**'
    - '!.git/**'
    - '!.github/**'
    - '!.vscode/**'

functions:
  api:
    handler: index.handler
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
    timeout: 30
    memorySize: 512

  websocketConnect:
    handler: services/websocket.handleConnect
    events:
      - websocket:
          route: $connect
    timeout: 30

  websocketDisconnect:
    handler: services/websocket.handleDisconnect
    events:
      - websocket:
          route: $disconnect
    timeout: 30

  websocketMessage:
    handler: services/websocket.handleMessage
    events:
      - websocket:
          route: $default
    timeout: 30

resources:
  Resources:
    WebSocketConnections:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: WebSocketConnections
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

custom:
  stages:
    - dev
    - prod

plugins:
  - serverless-offline